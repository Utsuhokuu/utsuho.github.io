{"pages":[{"title":"about","text":"“ I dwell in Possibility A fairer House than Prose More numerous of Windows Superior – for Doors Of Chambers as the Cedars Impregnable of eye And for an everlasting Roof The Gambrels of the Sky Of Visitors – the fairest For Occupation – This The spreading wide my narrow Hands To gather Paradise Emily Dickinson I dwell in Possibility ” 中山大学物理系本科在读 博客文章内容主要是我个人在学习或者工作上遇到的初级问题的解答，或者对于一段学习的阶段性总结，偶尔也会有个人的生活感悟。 博客其实有很多想写想折腾的地方，但最近正在努力备考中，所以博客更新会比较慢。","link":"/about/index.html"}],"posts":[{"title":"刷题记录1: PAT 1003 我要通过！","text":"刷题记录1: PAT 1003 我要通过！写在前面想了一下还是觉得可以写(shui)一些刷题的博客，来记录在我学习编程过程中遇到过值得记录的题目。最近在刷PAT，那么刷题记录就从这题开始吧。 题目描述“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。 得到“答案正确”的条件是： 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。 输入格式：每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。 输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。 输入样例：123456789109PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAAAPT 输出样例：123456789YESYESYESYESNONONONONO 题目分析 条件一：输入的字母串中必须含有'P','A','T'三个字符，而不能拥有其它字符。那么很简单，在C++11下我们可以用for(auto)来获取字符串中每一个字符，并且判断字符是否为'P','A','T'中的其一即可。 条件二：形如xPATx的字符串都可以通过，意思就是在满足条件一而且PAT前后所含A的数量相同的情况可以通过。 条件三：（这个条件比较难懂，我刚开始也研究了很久…）如果 aPbTc 是正确的，那么 aPbATca 也是正确。那么也就是说，如果aPbTc能通过的话那么说明其满足条件二，于是可以得出b=A,a=c。由条件三可得出aPAATaa也能通过，总结一下就是形如xPAATxx的字符串都可以通过。 综合考虑条件二、三，我们会发现其实能通过的字符串均满足公式： [P左边A的数目]*[PT中间A的数目]=[T右边A的数目] 再综合考虑条件一、二、三，我们可以知道P和T的数目都有且仅有一个，并且T需要在P之后出现。 这就是我们希望得出的规律。 参考代码(C++)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;/*函数设计思路：函数pass-by-reference并返回int型变量，当返回1时代表通过，返回0时代表不通过。*/int PATjudgment(const string&amp; ctr) { int count_P = 0, count_A = 0, count_T = 0; // P A T的数目 int count_LA = 0, count_MA = 0, count_RA = 0; // 左中右A的数目 for (auto i: ctr) { // C++11特性：for range循环，在循环内进行计数 if(i != 'P' &amp;&amp; i != 'A' &amp;&amp; i != 'T') // 条件一的判断 return 0; else if(i == 'P') ++count_P; else if(i == 'T') ++count_T; else if(i == 'A') ++count_A; if(count_P &gt; 1 || count_T &gt; 1) // 条件一、二、三的综合判断 return 0; if(count_P == 0 &amp;&amp; i == 'A') ++count_LA; if(count_P == 1 &amp;&amp; count_T == 0 &amp;&amp; i == 'A') ++count_MA; if(count_P == 1 &amp;&amp; count_T == 1 &amp;&amp; i == 'A') ++count_RA; } // 条件一、二、三的综合判断： if(count_P != 1 || count_T != 1 || count_A == 0 || count_MA == 0) return 0; // 条件二、三的综合判断： else if(count_LA * count_MA == count_RA) return 1; // 最后的else保证所有输入流都有返回值。若不写下面这一段，编译器会返回一个warning： else return 0; }int main(){ int n; cin &gt;&gt; n; string str; cin.ignore(); // 为了让输入流忽略第一行数字后的换行符，避免后面getline结果为'\\n' for(int i = 0; i != n; i++) { getline(cin, str); if(PATjudgment(str)) cout &lt;&lt; &quot;YES&quot;; else cout &lt;&lt; &quot;NO&quot;; // 控制输出总行数 if(i != n-1) cout &lt;&lt; endl; } return 0;}","link":"/2021/05/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-PAT-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81/"},{"title":"基于Hexo的个人网站搭建（踩坑）指南","text":"基于Hexo的个人网站搭建（踩坑）指南 TIPS: 致本文的读者： 本文章的操作教程是在 Windows 系统下进行的，在 Linux 或 MacOS下操作方式大同小异； 本指南中提到的：”站点配置“ 指的 Hexo 博客根目录下的 _config.yml，”主题配置“ 指的是 themes文件夹或其子文件夹下的_config.yml ，注意区分； 本指南中提到的 source目录都指的是博客目录下的 source文件夹，不推荐修改主题内 source 目录； 每次无论 hexo g 或 hexo s，都最好先使用 hexo clean； 页面结果以本地 hexo s 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常； 本文章持续更新，欢迎各位读者指摘。 目录 安装Git 安装Node.js 安装hexo 使用GitHub创建个人仓库 推送网站 发布文章 更换网站主题 常见问题Q&amp;A 后记 安装GitGit是一个开源的分布式版本控制系统，可以有效、高速地进行项目版本管理。简单来说可以通过Git来将你的博客文章同步到Github。 从Git官网下载安装 ( https://git-scm.com/download/win ) ，之后可以通过git --version 来测试是否安装成功。安装成功后，右键点击Git Bash Here或者在菜单栏搜索Git Bash，将你的Git与GitHub账号进行绑定： git config --global user.name &quot;在此处输入你的GitHub用户名&quot; git config --global user.email &quot;在此处输入你的GitHub注册邮箱&quot; 接着生成SSH密钥文件： 1ssh-keygen -t rsa -C &quot;在此处输入你的GitHub注册邮箱&quot; 保存文件的地址选项按照默认设定就好，直接按回车，记下生成.ssh文件夹的地址，然后在此文件夹中用文本编译器打开id_rsa.pub，将内容全部复制。 打开GitHub – Settings – SSH and GPG Keys 点击New SSH key Title是SSH密钥标题，按个人喜好填写即可，在Key一栏将刚刚复制的内容粘贴上去，之后点击Add SSH key。 在Git命令行输入ssh git@github.com，若出现如下反馈： 123PTY allocation request failed on channel 0Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 则说明GitHub公钥设置成功。 在这里我们设置GitHub密钥原因是，git使用https协议，每次推送都要输入密码，而采用ssh，将公钥放置在GitHub上，私钥放置在自己的电脑里之后可以省去这个过程。 安装Node.jsHexo是基于Node.js编写的，后续在网站搭建中需要用到Node.js中的npm指令。 Node.js下载地址：https://nodejs.org/en/download/ 之后可以在cmd/PowerShell输入： 12node -vnpm -v 测试是否安装成功。 至此，Hexo安装的前置工作已经准备完毕。 安装Hexo先创建一个文件夹（可以命名为hexoblog），存放hexo框架以及之后发布的网页文件。 之后的操作均在可以在hexo/cmd/Powershell中进行。 在hexoblog文件夹单击右键启动cmd/Powershell/Git Bash或者cd到hexoblog文件夹中。 用npm命令安装Hexo： 1npm install -g hexo-cli 按照惯例可以输入hexo -v 测试是否安装完成（顺便查看版本。 初始化Hexo： 1hexo init blog 此处blog可以用你喜欢的名字，这是一个存放网页配置文件的文件夹名，该目录下有 _config.yml：网站的配置信息。 scaffolds：模板文件夹。新建文章时，Hexo 会根据 scaffold 来建立文件。 source：资源文件夹。这是存放用户资源的地方。 themes：主题文件夹。Hexo会根据主题来生成静态页面。 package.json：应用程序的信息。 node_modules：依赖包文件夹。 接下来就可以查看我们的网页雏形了！ 在blog文件夹中，按照顺序键入以下三道命令： 123hexo new &quot;Hello World!&quot; //新建一篇文章，如果标题含空格的话，请用引号括起来hexo g //即hexo generate，生成静态文件hexo s //即hexo server，启动服务器，生成本地预览。 在默认情况下，访问网站为：http://localhost:4000/ 打开浏览器输入上述地址，就可以看到我们写的第一篇博客啦！ 使用GitHub创建个人仓库登录GitHub，在Repositories栏点击New创建新仓库，修改仓库名（Repository name）为: xxx.github.io，其中xxx为你注册GitHub的用户名。 这是一种以博客作为个人GitHub page主页的固定写法规范。 点击Create repository创建仓库。 *注意：建议不要选 Add a README file 项。 推送网站在blog根目录中打开站点配置_config.yml文件，翻到最后进行修改： 1234deploy: type: git repo: https://github.com/xxx/xxx.github.io.git //GitHub仓库的完整路径,记得加上.git branch: master *注意在冒号之后先加个空格。 安装部署的命令deploy-git： 1npm install hexo-deployer-git --save 然后输入： 123hexo cleanhexo ghexo d //即hexo deploy，部署网站。 若出现 1Branch 'master' set up to track remote branch 'master' for 'https://github.com/xxx/xxx.github.io.git'. 则说明部署成功。 之后，打开浏览器在地址栏输入放置个人网站仓库的路径，即xxx.github.io 你会发现你的个人博客已经上线，可以被访问了！ 发布文章文章的存储地址是blog根目录下的source文件夹中的_post文件夹，在blog根目录下使用命令来新建一篇博客： 1hexo n &quot;博客名字&quot; //即hexo new，新建一篇博客 新建的博客格式也是.md，可以使用Markdown编辑器打开。关于Markdown的使用方法在此处就不再详细讲解，感兴趣的话可以上网查阅相关使用文档。 更换网站主题如果你不喜欢Hexo的默认主题，那么可以在Hexo官网的主题页、GitHub等地方寻找并更换主题。具体每个主题的更换方法请参考对应主题的操作文档。 将下载好的主题文件放入blog根目录下的themes文件夹中。打开站点配置文件，修改主题： 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: &quot;主题名称&quot; 之后可以执行hexo g, hexo s 再次加载网站查看效果。 常见问题Q&amp;A1.出现”hexo:无法加载文件 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统中禁止执行脚本“错误如何解决？ 答: 首先以管理员身份运行Powershell，输入： 1get-ExecutionPolicy 此时返回状态：Restricted，表明执行策略状态是禁止，接着输入： 1set-ExecutionPolicy RemoteSigned 输入A/Y，回车即可。 2.输入localhost:4000后博客的本地预览无法访问怎么办？ 答： 首先确认前置步骤的hexo的安装配置是否出错以及hexo是否能正常运行，如果都没问题就是不能访问，那有可能是电脑的端口被占用了，解决方案如下： 启动服务器时，输入如下命令： 1hexo s -p 5000 *注意：端口号不一定是5000，可以在1024-5000中任选一个，如果再次出现问题，可以选择再次更换端口号，直到找到空闲端口。 3.出现”Usage: hexo &lt; command &gt;“错误如何解决？ 答： 这是没有在blog根目录（即有众多具体文件的文件夹）下输入hexo命令的原因，此时只需在blog根目录下再执行一次命令即可。 4.出现”OpenSSL SSL_read: Connection was reset, errno 10054“错误如何解决？ 答： 造成这种错误的原因一般是网络不稳定导致连接超时，可以先尝试再次执行。 若再次尝试之后仍然保持，可以在git下执行如下命令： 1git config --global http.sslVerify &quot;false&quot; 该命令解除了ssl验证，此时再次执行操作即可。 5.出现”Logon failed, use ctrl+c to cancel basic credential prompt.“错误如何解决？ 答： 一般来说这种错误发生在执行hexo d后在GitHub弹窗登陆时，这种情况可能是因为git升级了，需要更新。 在git下输入： 1git update-git-for-windows 即可。 另，即使出现问题的错误也不要紧，因为之后可以在自动弹出的Git Shell中输入用户名和密码进行登陆。 6.为什么我的部署的个人网站只显示个人网站仓库中的README内容，而不出现预设Hexo主题？ 答： 这是因为你在创建个人网站仓库是加入了README文件，导致仓库默认新建了一个名为main的默认branch，若运行hexo d后你会发现仓库中新建了一个名为master的branch。 解决方法是把master设为默认branch或者直接删除main。 7.在浏览器预览网站时出现” {% extends ‘_layout.swig‘ %} {% import ‘_macro/post.swig‘ as post_template %}“错误如何解决？ 答： 这是因为hexo在5.0版本之后把swig删除了，手动安装即可： 1npm i hexo-renderer-swig 8.hexo s 与 hexo d 的区别是什么？ 答： hexo s 是启动服务器，将博客加载之本地服务器，可以通过localhost进行预览。 hexo d 是部署网站，将博客内容推送到GitHub个人网站仓库中。 一般我们在编辑网站时，可以先执行hexo s 进行预览查看效果，确认无误之后再通过hexo d 部署网站。 9.hexo g 后出现”Template render error”错误如何解决？ 答： 出现这种错误一般来说是你的文章中引入了诸如大括号{} 之类的特殊字符。请仔细检查文章中是否存在特殊字符，有的话建议通过Markdown中的代码区块包裹起来（或者用其他方法对特殊字符进行转义）。 10.hexo s 后出现”TypeError: Cannot read property ‘utcOffset’ of null”错误如何解决？ 答： 将站点配置文件中开头的timezone 项修改为Asia/Shanghai 即可。 后记到这里为止，个人网站的搭建工作就基本告一段落了，但是其实我们距离一个精美的网站还差很远。如果说这篇文章的内容是购置了一套新房子的话，那么个性化配置和文章写作可以说是房子的内在装修过程了。不过万事开头难，最重要的是先把网站搭建起来，先玩起来再说，至于怎么把博客做得精致，做得专业的问题慢慢再考虑也不迟，毕竟写博客是日积月累的过程，不太可能一口吃成胖子。 不过说实话，虽然网站的搭建从步骤看貌似非常简单，但是实际操作的过程其实还是需要耗费不少精力的。我在折腾的过程中都曾一度想过放弃（主要是坑踩太多了QAQ），去使用CSDN啊简书啊等现成的博客网站。不过想了一下，拥有自己的网站实在是太cool了，所以就一直坚持了下来，于是便克服了众多困难，也获得了相应的成就感。我觉得，这种经历是弥足珍贵的。 其实这篇文章还有很多我想补充的地方，不过由于时间关系，更多的内容日后再填补啦~","link":"/2021/04/09/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"编程题","slug":"编程题","link":"/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[{"name":"刷题记录","slug":"刷题记录","link":"/categories/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"技术分享","slug":"技术分享","link":"/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"}]}