<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>刷题记录 PAT 1003 我要通过！</title>
    <link href="/2021/05/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-PAT-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81/"/>
    <url>/2021/05/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-PAT-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="刷题记录-PAT-1003-我要通过！"><a href="#刷题记录-PAT-1003-我要通过！" class="headerlink" title="[刷题记录]PAT 1003 我要通过！"></a>[刷题记录]PAT 1003 我要通过！</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>想了一下还是觉得可以写(shui)一些刷题的博客，来记录在我学习编程过程中遇到过值得记录的题目。最近在刷PAT，那么刷题记录就从这题开始吧。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA<br>APT<br></code></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs out">YES<br>YES<br>YES<br>YES<br>NO<br>NO<br>NO<br>NO<br>NO<br></code></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><ul><li><p>条件一：输入的字母串中必须含有<code>&#39;P&#39;,&#39;A&#39;,&#39;T&#39;</code>三个字符，而不能拥有其它字符。那么很简单，在C++11下我们可以用for(auto)来获取字符串中每一个字符，并且判断字符是否为<code>&#39;P&#39;,&#39;A&#39;,&#39;T&#39;</code>中的其一即可。</p></li><li><p>条件二：形如<code>xPATx</code>的字符串都可以通过，意思就是在满足条件一而且PAT前后所含A的数量相同的情况可以通过。</p></li><li><p>条件三：（这个条件比较难懂，我刚开始也研究了很久…）如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确。那么也就是说，如果<code>aPbTc</code>能通过的话那么说明其满足条件二，于是可以得出<code>b=A,a=c</code>。由条件三可得出<code>aPAATaa</code>也能通过，总结一下就是形如<code>xPAATxx</code>的字符串都可以通过。</p><p>综合考虑条件二、三，我们会发现其实能通过的字符串均满足公式：</p><p>[P左边A的数目]*[PT中间A的数目]=[T右边A的数目]</p><p>再综合考虑条件一、二、三，我们可以知道P和T的数目都有且仅有一个，并且T需要在P之后出现。</p><p>这就是我们希望得出的规律。</p></li></ul><h2 id="参考代码-C"><a href="#参考代码-C" class="headerlink" title="参考代码(C++)"></a>参考代码(C++)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数设计思路：函数pass-by-reference并返回int型变量，当返回1时代表通过，返回0时代表不通过。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PATjudgment</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; ctr)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count_P = <span class="hljs-number">0</span>, count_A = <span class="hljs-number">0</span>, count_T = <span class="hljs-number">0</span>; <span class="hljs-comment">// P A T的数目</span><br>    <span class="hljs-keyword">int</span> count_LA = <span class="hljs-number">0</span>, count_MA = <span class="hljs-number">0</span>, count_RA = <span class="hljs-number">0</span>; <span class="hljs-comment">// 左中右A的数目</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i: ctr) &#123; <span class="hljs-comment">// C++11特性：for range循环，在循环内进行计数</span><br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; i != <span class="hljs-string">&#x27;T&#x27;</span>) <span class="hljs-comment">// 条件一的判断</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-string">&#x27;P&#x27;</span>)<br>            ++count_P;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-string">&#x27;T&#x27;</span>)<br>            ++count_T;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            ++count_A;<br>        <br>        <span class="hljs-keyword">if</span>(count_P &gt; <span class="hljs-number">1</span> || count_T &gt; <span class="hljs-number">1</span>) <span class="hljs-comment">// 条件一、二、三的综合判断</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(count_P == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            ++count_LA;<br>        <span class="hljs-keyword">if</span>(count_P == <span class="hljs-number">1</span> &amp;&amp; count_T == <span class="hljs-number">0</span> &amp;&amp; i == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            ++count_MA;<br>        <span class="hljs-keyword">if</span>(count_P == <span class="hljs-number">1</span> &amp;&amp; count_T == <span class="hljs-number">1</span> &amp;&amp; i == <span class="hljs-string">&#x27;A&#x27;</span>)<br>            ++count_RA;<br>    &#125;<br>    <br><span class="hljs-comment">// 条件一、二、三的综合判断：</span><br>    <span class="hljs-keyword">if</span>(count_P != <span class="hljs-number">1</span> || count_T != <span class="hljs-number">1</span> || count_A == <span class="hljs-number">0</span> || count_MA == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 条件二、三的综合判断：</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count_LA * count_MA == count_RA) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 最后的else保证所有输入流都有返回值。若不写下面这一段，编译器会返回一个warning：</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    string str;<br>    cin.<span class="hljs-built_in">ignore</span>(); <span class="hljs-comment">// 为了让输入流忽略第一行数字后的换行符，避免后面getline结果为&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != n; i++) &#123;<br>        <span class="hljs-built_in">getline</span>(cin, str);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">PATjudgment</span>(str))<br>            cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span>;<br>        <span class="hljs-comment">// 控制输出总行数</span><br>        <span class="hljs-keyword">if</span>(i != n<span class="hljs-number">-1</span>)<br>            cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的个人网站搭建（踩坑）指南</title>
    <link href="/2021/04/09/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89%E6%8C%87%E5%8D%97/"/>
    <url>/2021/04/09/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hexo的个人网站搭建（踩坑）指南"><a href="#基于Hexo的个人网站搭建（踩坑）指南" class="headerlink" title="基于Hexo的个人网站搭建（踩坑）指南"></a>基于Hexo的个人网站搭建（踩坑）指南</h1><blockquote><p>TIPS:</p><p>致本文的读者：</p><ul><li>本文章的操作教程是在 Windows 系统下进行的，在 Linux 或 MacOS下操作方式大同小异；</li><li>本指南中提到的：”<strong>站点配置</strong>“ 指的 Hexo 博客根目录下的 <code>_config.yml</code>，”<strong>主题配置</strong>“ 指的是 themes文件夹或其子文件夹下的<code>_config.yml</code> ，注意区分；</li><li>本指南中提到的 source目录都指的是博客目录下的 source文件夹，不推荐修改主题内 source 目录；</li><li>每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用 <code>hexo clean</code>；</li><li>页面结果以本地 <code>hexo s</code> 为准，部署后的异常大部分是缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</li><li>本文章持续更新，欢迎各位读者指摘。</li></ul></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>安装Git  </li><li>安装Node.js  </li><li>安装hexo  </li><li>使用GitHub创建个人仓库  </li><li>推送网站  </li><li>发布文章 </li><li>更换网站主题  </li><li>常见问题Q&amp;A</li><li>后记</li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git是一个开源的分布式版本控制系统，可以有效、高速地进行项目版本管理。简单来说可以通过Git来将你的博客文章同步到Github。</p><p>从Git官网下载安装 ( <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> ) ，之后可以通过<code>git --version</code> 来测试是否安装成功。安装成功后，右键点击Git Bash Here或者在菜单栏搜索Git Bash，将你的Git与GitHub账号进行绑定：</p><pre><code>git config --global user.name &quot;在此处输入你的GitHub用户名&quot;git config --global user.email &quot;在此处输入你的GitHub注册邮箱&quot; </code></pre><p>接着生成SSH密钥文件：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;在此处输入你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>保存文件的地址选项按照默认设定就好，直接按回车，记下生成.ssh文件夹的地址，然后在此文件夹中用文本编译器打开id_rsa.pub，将内容全部复制。</p><p>打开GitHub – Settings – SSH and GPG Keys</p><p>点击New SSH key</p><p>Title是SSH密钥标题，按个人喜好填写即可，在Key一栏将刚刚复制的内容粘贴上去，之后点击Add SSH key。</p><p>在Git命令行输入<code>ssh git@github.com</code>，若出现如下反馈：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">PTY allocation request failed <span class="hljs-keyword">on</span> channel <span class="hljs-number">0</span><br>Hi xxx! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.<br>Connection <span class="hljs-keyword">to</span> github.com closed.<br></code></pre></td></tr></table></figure><p>则说明GitHub公钥设置成功。</p><p>在这里我们设置GitHub密钥原因是，git使用https协议，每次推送都要输入密码，而采用ssh，将公钥放置在GitHub上，私钥放置在自己的电脑里之后可以省去这个过程。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo是基于Node.js编写的，后续在网站搭建中需要用到Node.js中的npm指令。</p><p>Node.js下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> </p><p>之后可以在cmd/PowerShell输入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><p>测试是否安装成功。</p><p>至此，Hexo安装的前置工作已经准备完毕。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>先创建一个文件夹（可以命名为hexoblog），存放hexo框架以及之后发布的网页文件。</p><p>之后的操作均在可以在hexo/cmd/Powershell中进行。</p><p>在hexoblog文件夹单击右键启动cmd/Powershell/Git Bash或者<code>cd</code>到hexoblog文件夹中。</p><p>用npm命令安装Hexo：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>按照惯例可以输入<code>hexo -v</code> 测试是否安装完成（顺便查看版本。</p><p>初始化Hexo：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> blog<br></code></pre></td></tr></table></figure><p>此处blog可以用你喜欢的名字，这是一个存放网页配置文件的文件夹名，该目录下有</p><ul><li>_config.yml：网站的配置信息。</li><li>scaffolds：模板文件夹。新建文章时，Hexo 会根据 scaffold 来建立文件。</li><li>source：资源文件夹。这是存放用户资源的地方。</li><li>themes：主题文件夹。Hexo会根据主题来生成静态页面。</li><li>package.json：应用程序的信息。</li><li>node_modules：依赖包文件夹。</li></ul><p>接下来就可以查看我们的网页雏形了！</p><p>在blog文件夹中，按照顺序键入以下三道命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo new <span class="hljs-string">&quot;Hello World!&quot;</span> <span class="hljs-regexp">//</span>新建一篇文章，如果标题含空格的话，请用引号括起来<br>hexo g <span class="hljs-regexp">//</span>即hexo generate，生成静态文件<br>hexo s <span class="hljs-regexp">//</span>即hexo server，启动服务器，生成本地预览。<br></code></pre></td></tr></table></figure><p>在默认情况下，访问网站为：<code>http://localhost:4000/</code></p><p>打开浏览器输入上述地址，就可以看到我们写的第一篇博客啦！</p><h2 id="使用GitHub创建个人仓库"><a href="#使用GitHub创建个人仓库" class="headerlink" title="使用GitHub创建个人仓库"></a>使用GitHub创建个人仓库</h2><p>登录GitHub，在Repositories栏点击New创建新仓库，修改仓库名（Repository name）为: <code>xxx.github.io</code>，<strong>其中xxx为你注册GitHub的用户名</strong>。</p><p>这是一种以博客作为个人GitHub page主页的固定写法规范。</p><p>点击Create repository创建仓库。</p><p>*注意：建议不要选 Add a README file 项。</p><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>在blog根目录中打开<strong>站点配置</strong>_config.yml文件，翻到最后进行修改：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>type: git<br>repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xxx/</span>xxx.github.io.git <span class="hljs-regexp">//</span>GitHub仓库的完整路径,记得加上.git<br>branch: master<br></code></pre></td></tr></table></figure><p>*注意在冒号之后先加个空格。</p><p>安装部署的命令deploy-git：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean<br>hexo g<br>hexo d <span class="hljs-regexp">//</span>即hexo deploy，部署网站。<br></code></pre></td></tr></table></figure><p>若出现</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-builtin-name">set</span> up <span class="hljs-keyword">to</span> track remote branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;https://github.com/xxx/xxx.github.io.git&#x27;</span>.<br></code></pre></td></tr></table></figure><p>则说明部署成功。</p><p>之后，打开浏览器在地址栏输入放置个人网站仓库的路径，即<code>xxx.github.io</code></p><p>你会发现你的个人博客已经上线，可以被访问了！</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>文章的存储地址是blog根目录下的source文件夹中的_post文件夹，在blog根目录下使用命令来新建一篇博客：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo n <span class="hljs-string">&quot;博客名字&quot;</span> <span class="hljs-regexp">//</span>即hexo new，新建一篇博客<br></code></pre></td></tr></table></figure><p>新建的博客格式也是.md，可以使用Markdown编辑器打开。关于Markdown的使用方法在此处就不再详细讲解，感兴趣的话可以上网查阅相关使用文档。</p><h2 id="更换网站主题"><a href="#更换网站主题" class="headerlink" title="更换网站主题"></a>更换网站主题</h2><p>如果你不喜欢Hexo的默认主题，那么可以在Hexo官网的主题页、GitHub等地方寻找并更换主题。具体每个主题的更换方法请参考对应主题的操作文档。</p><p>将下载好的主题文件放入blog根目录下的themes文件夹中。打开站点配置文件，修改主题：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: <span class="hljs-string">&quot;主题名称&quot;</span> <br></code></pre></td></tr></table></figure><p>之后可以执行<code>hexo g</code>, <code>hexo s</code> 再次加载网站查看效果。</p><h2 id="常见问题Q-amp-A"><a href="#常见问题Q-amp-A" class="headerlink" title="常见问题Q&amp;A"></a>常见问题Q&amp;A</h2><p><strong>1.出现”hexo:无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1，因为在此系统中禁止执行脚本“错误如何解决？</strong></p><p>答:</p><p>首先以管理员身份运行Powershell，输入：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">get</span>-ExecutionPolicy<br></code></pre></td></tr></table></figure><p>此时返回状态：Restricted，表明执行策略状态是禁止，接着输入：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-ExecutionPolicy</span> <span class="hljs-string">RemoteSigned</span><br></code></pre></td></tr></table></figure><p>输入A/Y，回车即可。</p><p><strong>2.输入localhost:4000后博客的本地预览无法访问怎么办？</strong></p><p>答：</p><p>首先确认前置步骤的hexo的安装配置是否出错以及hexo是否能正常运行，如果都没问题就是不能访问，那有可能是电脑的端口被占用了，解决方案如下：</p><p>启动服务器时，输入如下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> s -p <span class="hljs-number">5000</span> <br></code></pre></td></tr></table></figure><p>*注意：端口号不一定是5000，可以在1024-5000中任选一个，如果再次出现问题，可以选择再次更换端口号，直到找到空闲端口。</p><p><strong>3.出现”Usage: hexo &lt; command &gt;“错误如何解决？</strong></p><p>答：</p><p>这是没有在blog根目录（即有众多具体文件的文件夹）下输入hexo命令的原因，此时只需在blog根目录下再执行一次命令即可。</p><p><strong>4.出现”OpenSSL SSL_read: Connection was reset, errno 10054“错误如何解决？</strong></p><p>答：</p><p>造成这种错误的原因一般是网络不稳定导致连接超时，可以先尝试再次执行。</p><p>若再次尝试之后仍然保持，可以在git下执行如下命令：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.sslVerify <span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></figure><p>该命令解除了ssl验证，此时再次执行操作即可。</p><p><strong>5.出现”Logon failed, use ctrl+c to cancel basic credential prompt.“错误如何解决？</strong></p><p>答：</p><p>一般来说这种错误发生在执行<code>hexo d</code>后在GitHub弹窗登陆时，这种情况可能是因为git升级了，需要更新。</p><p>在git下输入：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git update-git-for-windows</span><br></code></pre></td></tr></table></figure><p>即可。</p><p>另，即使出现问题的错误也不要紧，因为之后可以在自动弹出的Git Shell中输入用户名和密码进行登陆。</p><p><strong>6.为什么我的部署的个人网站只显示个人网站仓库中的README内容，而不出现预设Hexo主题？</strong></p><p>答：</p><p>这是因为你在创建个人网站仓库是加入了README文件，导致仓库默认新建了一个名为main的默认branch，若运行<code>hexo d</code>后你会发现仓库中新建了一个名为master的branch。</p><p>解决方法是把master设为默认branch或者直接删除main。</p><p><strong>7.在浏览器预览网站时出现” <code>&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</code>“错误如何解决？</strong></p><p>答：</p><p>这是因为hexo在5.0版本之后把swig删除了，手动安装即可：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-renderer-swig<br></code></pre></td></tr></table></figure><p><strong>8.<code>hexo s</code> 与 <code>hexo d</code> 的区别是什么？</strong></p><p>答：</p><p><code>hexo s</code> 是启动服务器，将博客加载之本地服务器，可以通过localhost进行预览。</p><p><code>hexo d</code> 是部署网站，将博客内容推送到GitHub个人网站仓库中。</p><p>一般我们在编辑网站时，可以先执行<code>hexo s</code> 进行预览查看效果，确认无误之后再通过<code>hexo d</code> 部署网站。</p><p><strong>9.<code>hexo g</code> 后出现”Template render error”错误如何解决？</strong></p><p>答：</p><p>出现这种错误一般来说是你的文章中引入了诸如大括号<code>&#123;&#125;</code> 之类的特殊字符。请仔细检查文章中是否存在特殊字符，有的话建议通过Markdown中的代码区块包裹起来（或者用其他方法对特殊字符进行转义）。</p><p><strong>10.<code>hexo s</code> 后出现”TypeError: Cannot read property ‘utcOffset’ of null”错误如何解决？</strong></p><p>答：</p><p>将站点配置文件中开头的<code>timezone</code> 项修改为<code>Asia/Shanghai</code> 即可。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到这里为止，个人网站的搭建工作就基本告一段落了，但是其实我们距离一个精美的网站还差很远。如果说这篇文章的内容是购置了一套新房子的话，那么个性化配置和文章写作可以说是房子的内在装修过程了。不过万事开头难，最重要的是先把网站搭建起来，先玩起来再说，至于怎么把博客做得精致，做得专业的问题慢慢再考虑也不迟，毕竟写博客是日积月累的过程，不太可能一口吃成胖子。</p><p>不过说实话，虽然网站的搭建从步骤看貌似非常简单，但是实际操作的过程其实还是需要耗费不少精力的。我在折腾的过程中都曾一度想过放弃（主要是坑踩太多了QAQ），去使用CSDN啊简书啊等现成的博客网站。不过想了一下，拥有自己的网站实在是太cool了，所以就一直坚持了下来，于是便克服了众多困难，也获得了相应的成就感。我觉得，这种经历是弥足珍贵的。</p><p>其实这篇文章还有很多我想补充的地方，不过由于时间关系，更多的内容日后再填补啦~</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
